// Copyright 2015, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

option objc_class_prefix = "HLW";

package nfs;

// The service definitions.
service Greeter {
  // Sends a greeting
  rpc SayHello (HelloRequest) returns (HelloReply) {}
}

service NFS {
  rpc NFSPROC_READ(READargs) returns (READres) {}
}

// The message definitions.
message fattr {
  enum ftype {
    NFSREG = 0;
    NFSDIR = 1;
    NFSBLK = 2;
    NFSCHR = 3;
    NFSLNK = 4;
    NFSSOCK = 5;
    NFSFIFO = 6;
  }
  ftype   type = 1;
  uint64  size = 2;   // the size of the file in bytes.
  uint64  used = 3;   // the actual disk space used for storing the file.
  uint64  fsid = 4;   // file system identifier.
  uint64  fileid = 5; // inode number of the file in the file system.
  uint64  atime = 6;  // timestamp when the file was last accessed.
  uint64  mtime = 7;  // timestamp when the file contents were last modified.
  uint64  ctime = 8;  // timestamp when the attributes of file were last changed.
}

message READargs {
  string nfs_fh = 1;
  uint64 offset = 2;
  uint64 count = 3;
}

message READresok {
  fattr   file_attributes = 1; // fattr directly used instead of post_op_attr.
  uint64  count = 2;
  bool    eof = 3;
  string  data = 4;
}

message READresfail {
  fattr file_attributes = 1; // fattr directly used instead of post_op_attr.
}

message READres {
  oneof READrestype {
    READresok   resok = 1;
    READresfail resfail = 2;
  }
}

// The request message containing the user's name.
message HelloRequest {
  repeated int32 data = 1;
}

// The response message containing the greetings
message HelloReply {
  int32 message = 1;
}
